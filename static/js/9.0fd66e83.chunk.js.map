{"version":3,"sources":["routes/posts/2020-01-28-blog/document.mdx","routes/posts/2020-01-28-blog/document.module.css"],"names":["readingTime","text","minutes","time","words","layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","C_Users_nelson_Downloads_Project_react_blog_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","className","styles","parentName","isMDXComponent","tableOfContents","arguments","length","undefined","frontMatter","module","exports","logo","logo-navi","logo-react","Index-logo-navi-spin","Index-logo-react-spin"],"mappings":"oTAGaA,EAAc,CAACC,KAAO,aAAaC,QAAU,KAAKC,KAAO,OAAOC,MAAQ,KAS/EC,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAE5EJ,OAAAE,EAAA,EAAAF,CAAA,OAAKK,UAAWC,IAAM,SACpBN,OAAAE,EAAA,EAAAF,CAAA,8ZAEFA,OAAAE,EAAA,EAAAF,CAAA,WACEA,OAAAE,EAAA,EAAAF,CAAA,6QACAA,OAAAE,EAAA,EAAAF,CAAA,SACEA,OAAAE,EAAA,EAAAF,CAAA,yxBAAoxBA,OAAAE,EAAA,EAAAF,CAAA,cAAYO,WAAW,KAAvB,gBAApxB,cAEFP,OAAAE,EAAA,EAAAF,CAAA,4lCAGAA,OAAAE,EAAA,EAAAF,CAAA,qnDAGAA,OAAAE,EAAA,EAAAF,CAAA,6pBAQNJ,EAAWY,gBAAiB,EACrB,IAAMC,EAAkB,WAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,SAAmB,IAIrCG,EAAc,uBChD3BC,EAAAC,QAAA,CAAkBC,KAAA,uBAAAC,YAAA,4BAAAC,aAAA,6BAAAC,uBAAA,uCAAAC,wBAAA","file":"static/js/9.0fd66e83.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\nexport const readingTime = {\"text\":\"5 min read\",\"minutes\":4.39,\"time\":263400,\"words\":878}\n/* @jsx mdx */\nimport styles from './document.module.css'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <div className={styles[\"Welcome\"]}>\n      <p>{`I have not been posting a lot on this blog (I was using Notion to consolidate all my learning resources in Shopee last semester. But I wanted to be accountable by learning how to write in a more understandable and systematic fashion. I can only do so if I write about my learning progress AND expecting people to read what I write. Thus, for this semester, I will try to make at least one post a day.`}</p>\n    </div>\n    <div>\n      <p>{`My learning progress has somewhat stalled for web development. Although I was coding quite intensely while interning at Shopee, it was more related to Python automation. As such, Iâ€™m picking off where I left off after I ended my internship at Carigos.`}</p>\n      <p>\n        <p>{`Yesterday, I worked on the frontend for the RC4 IT committee. I started by downloading SourceTree, a git GUI for Windows, so that I can pick up where others have left off. I also needed to be familiar with git tools, especially because I am working on multiple projects with different stakeholders. SourceTree was quite intuitive to use, even for a beginner like myself. I was initially confused about what a few terms meant - such as the differences between pull and fetch, commit, push and merge, etc. However, a simple Google search did its trick. This was not the case for psql and docker, unfortunately. I learnt how to switch between branches (letting my code in IntelliJ update automatically), and how to delete branches. (I need to remember to update my node modules using `}<inlineCode parentName=\"p\">{`yarn install`}</inlineCode>{` though.)`}</p>\n      </p>\n      <p>\nAround midnight, I realized that I need to use PostgreSQL to connect to the database so that I can use localhost:4000 as a proxy. (Before this, I was editing the tsconfig to bypass errors and warnings - such as changing the noImplicitAny to false and setting the proxy back to 3000.) I did not know the difference between psql (the command line) and pgAdmin 4 (the GUI) intiially, and I was trying to run 'postgreSQL' like an exe file, and then tried running it from windows cmd later on. Running psql on my command line works, and it automatically detects my user as nelson (my CPU username) even though I did not configure any settings. It asked for a password, which I'm not sure what it is even now. I tried various options - my user password, blank, and various searches pointed me to do some linux commmands (which I cannot do in Windows) and changing a config file in the psql directory. These did not work and I still cannot figure out till now. My guess is that I have to log in when the original database owner sets it up. I don't think it is hosted anywhere was I was trying to connect to it.\n      </p>\n      <p>\nOne of the yarn scripts was yarn database:start, which launches the psql database through a docker command. Hui Ting told me to install docker. As I only have Windows Home, I could only install docker toolbox, which was the older version with only the command line (no GUI or bin files). I googled on how to connect docker to IntelliJ as I was running my code on IntelliJ at that time. The problem I faced was not knowing how which TCP socket (Engine API url) I should connect to. The docker documentation is extremely confusing for a beginner like myself, as there is very little written about docker toolbox (even though most of the functions from docker for windows can be applied). My question at that time could not be easily answered by a google search, so I had to read the entire documentation, while not knowing what they are trying to say, and trying out many different methods. In the docker shell, I could run docker build and docker run, but I was not sure about the arguments. Using --help did not really help as they just listed a bunch of different things I could add as an argument. Fortunately, some solutions pointed me at the correct direction. First, run `docker run --interactive --tty ubuntu bash` followed by `docker image ls` and you will find that the ubuntu image is listed. Here, you can find the engine API url that you can key in to IntelliJ (it is correct, but because it is served over a HTTPS connection, you need a certificate to connect through this method. At the point of writing this, I am still unsure of how to resolve this problem. I am going to buy Windows Pro to download the full docker version).\n      </p>\n      <p>\nAnyway, since that did not work, and I did not want to give up so easily, I pressed on. I tried running docker commands in the windows command line. Even after adding the path to my environment variables, that did not work. I checked the paths using %PATH% and the path was actually listed there. Nope. Docker was not working. Later I realized that it only works for Linux/Unix OS. For Windows, you need to use Powershell (Bash also does not work). I only discovered Powershell recently. People say it is a better command line than the default one. (https://searchitoperations.techtarget.com/tip/On-Windows-PowerShell-vs-Bash-comparison-gets-interesting)\n      </p>\n    </div>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\nexport const tableOfContents = (components={}) => [\n  \n]\n\nexport const frontMatter = {}\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"document_logo__3K9bk\",\"logo-navi\":\"document_logo-navi__pFqim\",\"logo-react\":\"document_logo-react__3Ukmi\",\"Index-logo-navi-spin\":\"document_Index-logo-navi-spin__2Eyjo\",\"Index-logo-react-spin\":\"document_Index-logo-react-spin__kUP15\"};"],"sourceRoot":""}